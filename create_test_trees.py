#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['VISUALIZATION_ENABLED'] = 'true'

from ai_agent.utils.decision_tree import DecisionTreeBuilder, QueryType
from ai_agent.utils.tree_exporter import DecisionTreeExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_trees():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    logger.info("üå≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tree_builder = DecisionTreeBuilder()
        tree_exporter = DecisionTreeExporter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        test_cases = [
            {
                "query": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö?",
                "type": "general_question",
                "context": True
            },
            {
                "query": "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 44-–§–ó?",
                "type": "compliance_check", 
                "context": True
            },
            {
                "query": "–ö–∞–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –∑–∞–∫—É–ø–∫–∞—Ö?",
                "type": "general_question",
                "context": True
            },
            {
                "query": "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—É–ø–∫–∏",
                "type": "general_question",
                "context": False
            },
            {
                "query": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é",
                "type": "compliance_check",
                "context": True
            }
        ]
        
        created_trees = []
        
        for i, test_case in enumerate(test_cases, 1):
            logger.info(f"\n--- –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ {i}/5: {test_case['query'][:50]}... ---")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if test_case['type'] == 'compliance_check':
                tree = tree_builder.build_compliance_check_tree(
                    has_reference_docs=test_case['context'],
                    query_context=test_case['query']
                )
            else:
                tree = tree_builder.build_general_query_tree(
                    query=test_case['query'],
                    context_available=test_case['context']
                )
            
            logger.info(f"‚úÖ –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {tree.id}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ
            tree_path = tree_exporter.export_tree(
                tree=tree,
                query_type=test_case['type'],
                query_text=test_case['query']
            )
            
            if tree_path:
                logger.info(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤: {tree_path}")
                
                # –ü–æ–ª—É—á–∞–µ–º URL
                viz_url = tree_exporter.get_visualization_url(tree_path)
                logger.info(f"üîó URL: {viz_url}")
                
                created_trees.append({
                    'query': test_case['query'],
                    'type': test_case['type'],
                    'path': tree_path,
                    'url': viz_url
                })
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è: {test_case['query']}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\nüìä === –ò–¢–û–ì–ò ===")
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–µ—Ä–µ–≤—å–µ–≤: {len(created_trees)}")
        logger.info(f"üåê –í–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: http://localhost:8501")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        export_dir = "./visualization/data/decision_trees"
        if os.path.exists(export_dir):
            files = [f for f in os.listdir(export_dir) if f.endswith('.json')]
            logger.info(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(files)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            logger.info(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è:")
            for tree in created_trees:
                filename = os.path.basename(tree['path'])
                file_size = os.path.getsize(tree['path'])
                logger.info(f"  ‚Ä¢ {filename} ({file_size} –±–∞–π—Ç)")
                logger.info(f"    –ó–∞–ø—Ä–æ—Å: {tree['query'][:60]}...")
        
        logger.info(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è —Å–æ–∑–¥–∞–Ω—ã! –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8501 –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    create_test_trees()