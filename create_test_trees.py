#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append('/app')

try:
    from ai_agent.utils.decision_tree import DecisionTreeBuilder, QueryType
    from ai_agent.utils.tree_exporter import DecisionTreeExporter
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ai-agent")
    sys.exit(1)

def create_test_trees():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π."""
    print("üå≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    builder = DecisionTreeBuilder()
    exporter = DecisionTreeExporter('/tmp/decision_trees_analysis')
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–æ–Ω–∞ –æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö", "compliance_check"),
        ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–æ—Ä–º–∞–º —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞", "compliance_check"),
        ("–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "general_question"),
        ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û?", "general_question"),
        ("–°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–ª–∏—á–∏–π", "general_question")
    ]
    
    created_files = []
    
    for i, (query, query_type) in enumerate(test_queries, 1):
        print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ {i}/5: {query[:50]}...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if query_type == "compliance_check":
                tree = builder.build_compliance_check_tree(
                    has_reference_docs=True, 
                    query_context=query
                )
                qt = QueryType.COMPLIANCE_CHECK
            else:
                tree = builder.build_general_query_tree(query, context_available=True)
                qt = QueryType.GENERAL_QUESTION
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞
            file_path = exporter.export_tree(tree, qt.value, query)
            
            if file_path:
                created_files.append(file_path)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {i}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ {i}: {e}")
    
    return created_files

def analyze_uniqueness(files):
    """–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ {len(files)} —Ñ–∞–π–ª–æ–≤...")
    
    if not files:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
    file_contents = {}
    unique_fields = set()
    
    for file_path in files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = json.load(f)
                file_contents[file_path] = content
                
                # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                unique_key = (
                    content.get('id', ''),
                    content.get('timestamp', ''),
                    content.get('query_text', ''),
                    content.get('root', {}).get('label', ''),
                    content.get('root', {}).get('description', '')
                )
                unique_fields.add(unique_key)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {len(unique_fields)}")
    
    if len(unique_fields) == len(files):
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã!")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    print(f"\nüìã –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è —Ñ–∞–π–ª–æ–≤:")
    for file_path in files:
        if file_path in file_contents:
            content = file_contents[file_path]
            filename = os.path.basename(file_path)
            print(f"\nüî∏ {filename}:")
            print(f"   ID: {content.get('id', 'N/A')[:8]}...")
            print(f"   Timestamp: {content.get('timestamp', 'N/A')}")
            print(f"   Query: {content.get('query_text', 'N/A')[:50]}...")
            print(f"   Root Label: {content.get('root', {}).get('label', 'N/A')}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
    created_files = create_test_trees()
    
    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    analyze_uniqueness(created_files)
    
    print("\n" + "=" * 60)
    print("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: /tmp/decision_trees_analysis/")
    print(f"üåê –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: http://localhost:8501")

if __name__ == "__main__":
    main()