"""CLI commands for the AI agent."""

import os
import sys
import click
from pathlib import Path
from typing import Optional, List, Dict, Any
import logging
from datetime import datetime

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm
from rich.markdown import Markdown

try:
    from docx import Document as DocxDocument
except ImportError:
    DocxDocument = None

from ..core.document_manager import DocumentManager, DocumentManagerError
from ..models.document import DocumentCategory
from ..core.session_manager import SessionManager, SessionManagerError
from ..core.query_processor import QueryProcessor, QueryProcessorError
from ..core.ollama_client import OllamaClient, OllamaConnectionError
from ..utils.logging_config import get_logger
from ..utils.performance_monitor import performance_monitor
from ..utils.cache_manager import cache_manager
from ..utils.async_processor import async_processor
from ..utils.performance_monitor import performance_tracker
from ..utils.error_handling import (
    handle_error, create_error, ErrorCategory, ErrorSeverity,
    error_notification_manager, is_network_error
)
from ..utils.health_monitor import health_monitor


console = Console()
logger = get_logger(__name__)


class AIAgentCLI:
    """CLI interface for the AI agent."""
    
    def __init__(self):
        """Initialize CLI with core components."""
        self.document_manager = None
        self.session_manager = None
        self.query_processor = None
        self.ollama_client = None
        self.current_session_id = None
        
        self._initialize_components()
    
    def _initialize_components(self):
        """Initialize all core components."""
        try:
            with performance_tracker("cli_initialization"):
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=console
                ) as progress:
                    task = progress.add_task("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...", total=None)
                    
                    logger.info("Starting CLI components initialization")
                    
                    # Initialize Ollama client
                    progress.update(task, description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama –∫–ª–∏–µ–Ω—Ç–∞...")
                    self.ollama_client = OllamaClient()
                    
                    # Check Ollama connection
                    progress.update(task, description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama...")
                    if not self.ollama_client.health_check():
                        logger.error("Failed to connect to Ollama service")
                        console.print("[red]‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama —Å–µ—Ä–≤–∏—Å—É")
                        console.print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω (ollama serve)")
                        sys.exit(1)
                    
                    # Initialize document manager
                    progress.update(task, description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                    self.document_manager = DocumentManager()
                    
                    # Initialize session manager
                    progress.update(task, description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π...")
                    self.session_manager = SessionManager()
                    
                    # Initialize query processor
                    progress.update(task, description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...")
                    self.query_processor = QueryProcessor(
                        document_manager=self.document_manager,
                        session_manager=self.session_manager,
                        ollama_client=self.ollama_client
                    )
                    
                    progress.update(task, description="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
                    logger.info("CLI components initialized successfully")
                    
                    # Start health monitoring
                    health_monitor.start_monitoring()
                
        except Exception as e:
            error = handle_error(
                error=e,
                error_code="CLI_INITIALIZATION_FAILED",
                category=ErrorCategory.CONFIGURATION,
                severity=ErrorSeverity.CRITICAL,
                details={'component': 'CLI'},
                suggestions=[
                    "Check if Ollama service is running (ollama serve)",
                    "Verify all dependencies are installed",
                    "Check file permissions for data directories",
                    "Review configuration settings"
                ]
            )
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            console.print("[yellow]üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for suggestion in error.error_info.suggestions or []:
                console.print(f"  ‚Ä¢ {suggestion}")
            sys.exit(1)


@click.group()
@click.option('--verbose', '-v', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.pass_context
def cli(ctx, verbose):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π AI –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤: TXT, MD, DOCX, PDF, RTF
    """
    ctx.ensure_object(dict)
    
    # Setup logging
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')
    
    # Initialize CLI
    ctx.obj['cli'] = AIAgentCLI()


@cli.command()
@click.option('--format', '-f', type=click.Choice(['table', 'json']), default='table', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
@click.pass_context
def health(ctx, format):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        # Run health checks
        health_results = health_monitor.run_all_checks()
        health_summary = health_monitor.get_health_summary()
        
        if format == 'json':
            import json
            console.print(json.dumps({
                'summary': health_summary,
                'checks': {
                    name: {
                        'status': check.status.value,
                        'message': check.message,
                        'details': check.details,
                        'timestamp': check.timestamp.isoformat(),
                        'response_time': check.response_time
                    }
                    for name, check in health_results.items()
                }
            }, indent=2, ensure_ascii=False))
        else:
            # Display as table
            table = Table(title="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
            table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="bold")
            table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ")
            table.add_column("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞", justify="right")
            
            for name, check in health_results.items():
                status_color = {
                    'healthy': 'green',
                    'warning': 'yellow',
                    'critical': 'red',
                    'unknown': 'dim'
                }.get(check.status.value, 'white')
                
                status_icon = {
                    'healthy': '‚úÖ',
                    'warning': '‚ö†Ô∏è',
                    'critical': '‚ùå',
                    'unknown': '‚ùì'
                }.get(check.status.value, '?')
                
                response_time = f"{check.response_time:.2f}s" if check.response_time else "N/A"
                
                table.add_row(
                    name.replace('_', ' ').title(),
                    f"[{status_color}]{status_icon} {check.status.value.upper()}[/{status_color}]",
                    check.message,
                    response_time
                )
            
            console.print(table)
            
            # Show overall status
            overall_status = health_summary['overall_status']
            status_color = {
                'healthy': 'green',
                'warning': 'yellow', 
                'critical': 'red',
                'unknown': 'dim'
            }.get(overall_status, 'white')
            
            console.print(f"\n[{status_color}]–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status.upper()}[/{status_color}]")
            
            # Show error statistics if available
            error_stats = error_notification_manager.get_error_summary()
            if error_stats['total_errors'] > 0:
                console.print(f"\n[yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:[/yellow]")
                console.print(f"  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_stats['total_errors']}")
                console.print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {error_stats['unique_error_codes']}")
                console.print(f"  –ù–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫: {error_stats['recent_error_rate']}")
                
                if error_stats['most_frequent_errors']:
                    console.print("  –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:")
                    for error_code, count in error_stats['most_frequent_errors']:
                        console.print(f"    ‚Ä¢ {error_code}: {count}")
    
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        sys.exit(1)


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--title', '-t', help='–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.option('--metadata', '-m', multiple=True, help='–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value')
@click.option('--category', '-c', type=click.Choice(['general', 'reference', 'target']), default='general', help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.option('--tags', help='–¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.option('--show-text', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.pass_context
def upload(ctx, file_path, title, metadata, category, tags, show_text):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, DOCX, PDF, RTF
    """
    cli_instance = ctx.obj['cli']
    
    try:
        # Set show extracted text option in file processor
        from ..utils.file_processor import file_processor
        file_processor.show_extracted_text = show_text
        
        # Parse metadata
        metadata_dict = {}
        for item in metadata:
            if '=' in item:
                key, value = item.split('=', 1)
                metadata_dict[key] = value
        
        if title:
            metadata_dict['title'] = title
        
        # Parse category
        doc_category = DocumentCategory(category)
        
        # Parse tags
        doc_tags = []
        if tags:
            doc_tags = [tag.strip() for tag in tags.split(',') if tag.strip()]
        
        # Show file type info
        file_path_obj = Path(file_path)
        file_type_desc = cli_instance.document_manager.get_file_type_description(file_path_obj)
        console.print(f"[blue]üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type_desc}[/blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...", total=None)
            
            doc_id = cli_instance.document_manager.upload_document(
                file_path=file_path,
                metadata=metadata_dict,
                category=doc_category,
                tags=doc_tags
            )
            
            progress.update(task, description="–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ")
        
        console.print(Panel(
            f"[green]‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω\n\n"
            f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: [bold]{doc_id}[/bold]\n"
            f"–§–∞–π–ª: [blue]{file_path}[/blue]\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: [yellow]{category}[/yellow]\n"
            f"–¢–µ–≥–∏: [cyan]{', '.join(doc_tags) if doc_tags else '–Ω–µ—Ç'}[/cyan]",
            title="–£—Å–ø–µ—Ö"
        ))
        
    except DocumentManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # Show suggestions if available
        if hasattr(e, 'error_info') and e.error_info.suggestions:
            console.print("[yellow]üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for suggestion in e.error_info.suggestions:
                console.print(f"  ‚Ä¢ {suggestion}")
        
        sys.exit(1)
    except Exception as e:
        error = handle_error(
            error=e,
            error_code="DOCUMENT_UPLOAD_UNEXPECTED_ERROR",
            category=ErrorCategory.PROCESSING,
            severity=ErrorSeverity.HIGH,
            details={'file_path': file_path, 'category': category},
            suggestions=[
                "Check file format and encoding",
                "Verify file permissions",
                "Try uploading a smaller file first",
                "Check available disk space"
            ]
        )
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        console.print("[yellow]üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for suggestion in error.error_info.suggestions:
            console.print(f"  ‚Ä¢ {suggestion}")
        sys.exit(1)


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--title', '-t', help='–ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.option('--tags', help='–¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.option('--metadata', '-m', multiple=True, help='–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value')
@click.option('--show-text', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.pass_context
def upload_reference(ctx, file_path, title, tags, metadata, show_text):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π/–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, DOCX, PDF, RTF
    """
    cli_instance = ctx.obj['cli']
    
    try:
        # Set show extracted text option in file processor
        from ..utils.file_processor import file_processor
        file_processor.show_extracted_text = show_text
        
        # Parse metadata
        metadata_dict = {}
        for item in metadata:
            if '=' in item:
                key, value = item.split('=', 1)
                metadata_dict[key] = value
        
        if title:
            metadata_dict['title'] = title
        
        # Parse tags
        doc_tags = []
        if tags:
            doc_tags = [tag.strip() for tag in tags.split(',') if tag.strip()]
        
        # Show file type info
        file_path_obj = Path(file_path)
        file_type_desc = cli_instance.document_manager.get_file_type_description(file_path_obj)
        console.print(f"[blue]üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type_desc}[/blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...", total=None)
            
            doc_id = cli_instance.document_manager.upload_document(
                file_path=file_path,
                metadata=metadata_dict,
                category=DocumentCategory.REFERENCE,
                tags=doc_tags
            )
            
            progress.update(task, description="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ")
        
        console.print(Panel(
            f"[green]‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω\n\n"
            f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: [bold]{doc_id}[/bold]\n"
            f"–§–∞–π–ª: [blue]{file_path}[/blue]\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: [yellow]reference[/yellow]\n"
            f"–¢–µ–≥–∏: [cyan]{', '.join(doc_tags) if doc_tags else '–Ω–µ—Ç'}[/cyan]",
            title="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
        ))
        
    except DocumentManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        sys.exit(1)


@cli.command()
@click.argument('path', type=click.Path(exists=True))
@click.option('--recursive', '-r', is_flag=True, help='–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö')
@click.option('--pattern', '-p', default='*.txt,*.md,*.docx,*.pdf,*.rtf', help='–®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: *.txt,*.md,*.docx,*.pdf,*.rtf)')
@click.option('--metadata', '-m', multiple=True, help='–û–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value')
@click.option('--category', '-c', type=click.Choice(['general', 'reference', 'target']), default='general', help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
@click.option('--tags', help='–û–±—â–∏–µ —Ç–µ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.option('--skip-errors', is_flag=True, help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö')
@click.option('--dry-run', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏')
@click.option('--show-text', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
@click.pass_context
def batch_upload(ctx, path, recursive, pattern, metadata, category, tags, skip_errors, dry_run, show_text):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑ –ø–∞–ø–∫–∏ –∏–ª–∏ –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, DOCX, PDF, RTF
    """
    cli_instance = ctx.obj['cli']
    
    try:
        # Set show extracted text option in file processor
        from ..utils.file_processor import file_processor
        file_processor.show_extracted_text = show_text
        
        # Parse common metadata
        metadata_dict = {}
        for item in metadata:
            if '=' in item:
                key, value = item.split('=', 1)
                metadata_dict[key] = value
        
        # Parse category and tags
        doc_category = DocumentCategory(category)
        doc_tags = []
        if tags:
            doc_tags = [tag.strip() for tag in tags.split(',') if tag.strip()]
        
        # Find files to upload
        files_to_upload = _find_files_for_batch_upload(path, pattern, recursive)
        
        if not files_to_upload:
            console.print("[yellow]‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        # Show files that will be uploaded
        console.print(f"[blue]üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(files_to_upload)}")
        
        if dry_run:
            _show_batch_upload_preview(files_to_upload)
            return
        
        # Confirm batch upload
        if not Confirm.ask(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {len(files_to_upload)} —Ñ–∞–π–ª–æ–≤?"):
            console.print("[yellow]–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # Perform batch upload
        results = _perform_batch_upload(cli_instance, files_to_upload, metadata_dict, doc_category, doc_tags, skip_errors)
        
        # Show results
        _show_batch_upload_results(results)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ batch –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        sys.exit(1)


@cli.command()
@click.option('--session-id', '-s', help='ID —Å–µ—Å—Å–∏–∏ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
@click.option('--show-decision-tree', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≤–µ—Ç–∞')
@click.option('--web-visualization', '-w', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π')
@click.pass_context
def query(ctx, session_id, show_decision_tree, web_visualization):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI –∞–≥–µ–Ω—Ç—É."""
    cli_instance = ctx.obj['cli']
    
    # Create or use existing session
    if session_id is None:
        session_id = cli_instance.session_manager.create_session()
        console.print(f"[blue]üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
    
    cli_instance.current_session_id = session_id
    
    # Set decision tree and visualization options
    if show_decision_tree:
        cli_instance.query_processor.set_decision_tree_enabled(True)
    
    if web_visualization:
        cli_instance.query_processor.set_web_visualization(True)
        console.print(f"[blue]üåê –í–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {os.environ.get('VISUALIZATION_URL', 'http://localhost:8501')}")
    
    try:
        # Interactive query loop
        console.print(Panel(
            "[bold green]AI –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ[/bold green]\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n"
            "‚Ä¢ [cyan]/help[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
            "‚Ä¢ [cyan]/history[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏\n"
            "‚Ä¢ [cyan]/check[/cyan] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ [cyan]/exit[/cyan] - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
        ))
        
        while True:
            user_input = Prompt.ask("\n[bold blue]–í–∞—à –≤–æ–ø—Ä–æ—Å")
            
            if user_input.lower() in ['/exit', '/quit', 'exit', 'quit']:
                break
            elif user_input.lower() == '/help':
                _show_help()
                continue
            elif user_input.lower() == '/history':
                _show_session_history(cli_instance, session_id)
                continue
            elif user_input.lower() == '/check':
                _document_check_mode(cli_instance, session_id)
                continue
            elif user_input.lower() == '/viz':
                viz_url = os.environ.get('VISUALIZATION_URL', 'http://localhost:8501')
                console.print(f"[blue]üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {viz_url}")
                console.print("[yellow]–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –æ—Ç–∫—Ä–æ–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                continue
            elif not user_input.strip():
                continue
            
            # Process query
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", total=None)
                
                try:
                    response = cli_instance.query_processor.process_general_query(
                        query=user_input,
                        session_id=session_id
                    )
                    
                    progress.update(task, description="–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ‚úÖ")
                    
                except QueryProcessorError as e:
                    progress.update(task, description="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚ùå")
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
            
            # Display response
            _display_response(response)
    
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}")


@cli.command()
@click.argument('document_path', type=click.Path(exists=True))
@click.option('--session-id', '-s', help='ID —Å–µ—Å—Å–∏–∏ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
@click.option('--reference-docs', '-r', help='ID —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)')
@click.option('--interactive', '-i', is_flag=True, help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
@click.option('--show-text', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.option('--show-decision-tree', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏')
@click.option('--web-visualization', '-w', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π')
@click.pass_context
def check_document(ctx, document_path, session_id, reference_docs, interactive, show_text, show_decision_tree, web_visualization):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, DOCX, PDF, RTF
    """
    cli_instance = ctx.obj['cli']
    
    try:
        # Set show extracted text option in file processor
        from ..utils.file_processor import file_processor
        file_processor.show_extracted_text = show_text
        
        # Create or use existing session
        if session_id is None:
            session_id = cli_instance.session_manager.create_session()
            console.print(f"[blue]üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
        
        # Set decision tree and visualization options
        if show_decision_tree:
            cli_instance.query_processor.set_decision_tree_enabled(True)
            
        if web_visualization:
            cli_instance.query_processor.set_web_visualization(True)
            console.print(f"[blue]üåê –í–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {os.environ.get('VISUALIZATION_URL', 'http://localhost:8501')}")
        
        # Extract document content using file processor
        document_path_obj = Path(document_path)
        
        # Show file type info
        file_type_desc = cli_instance.document_manager.get_file_type_description(document_path_obj)
        console.print(f"[blue]üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type_desc}[/blue]")
        
        try:
            document_content, file_metadata = file_processor.extract_text(document_path_obj)
            
            if not file_processor.validate_extracted_text(document_content):
                console.print("[red]‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–µ–∫—Å—Ç")
                sys.exit(1)
                
            # Show extraction metadata
            console.print(f"[dim]üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {file_metadata.get('character_count', 'N/A')}[/dim]")
            if 'pages_count' in file_metadata:
                console.print(f"[dim]üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {file_metadata['pages_count']}[/dim]")
            if 'tables_count' in file_metadata:
                console.print(f"[dim]üìã –¢–∞–±–ª–∏—Ü: {file_metadata['tables_count']}[/dim]")
                
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            sys.exit(1)
        
        # Get reference document IDs
        reference_doc_ids = None
        if reference_docs:
            reference_doc_ids = [doc_id.strip() for doc_id in reference_docs.split(',') if doc_id.strip()]
        elif interactive:
            reference_doc_ids = _select_reference_documents_interactive(cli_instance)
            if not reference_doc_ids:
                console.print("[yellow]–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # Perform document check
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ...", total=None)
            
            try:
                response = cli_instance.query_processor.process_document_check(
                    document_content=document_content,
                    session_id=session_id,
                    reference_document_ids=reference_doc_ids,
                    document_filename=document_path
                )
                
                progress.update(task, description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
                
            except QueryProcessorError as e:
                progress.update(task, description="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚ùå")
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}")
                sys.exit(1)
        
        # Display response
        _display_compliance_report(response, reference_doc_ids)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        sys.exit(1)


@cli.command()
@click.option('--list', '-l', 'list_sessions', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π')
@click.option('--history', '-h', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏')
@click.option('--clear', '-c', help='–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é')
@click.option('--delete', '-d', help='–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é')
@click.pass_context
def session(ctx, list_sessions, history, clear, delete):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏."""
    cli_instance = ctx.obj['cli']
    
    try:
        if list_sessions:
            _list_sessions(cli_instance)
        elif history:
            _show_session_history(cli_instance, history)
        elif clear:
            if cli_instance.session_manager.clear_session(clear):
                console.print(f"[green]‚úÖ –°–µ—Å—Å–∏—è {clear} –æ—á–∏—â–µ–Ω–∞")
            else:
                console.print(f"[red]‚ùå –°–µ—Å—Å–∏—è {clear} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        elif delete:
            if Confirm.ask(f"–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {delete}?"):
                if cli_instance.session_manager.delete_session(delete):
                    console.print(f"[green]‚úÖ –°–µ—Å—Å–∏—è {delete} —É–¥–∞–ª–µ–Ω–∞")
                else:
                    console.print(f"[red]‚ùå –°–µ—Å—Å–∏—è {delete} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π: --list, --history, --clear, --delete")
            
    except SessionManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏: {e}")


@cli.command()
@click.option('--list', '-l', 'list_docs', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
@click.option('--info', '-i', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ')
@click.option('--delete', '-d', help='–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç')
@click.option('--stats', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
@click.option('--category', '-c', type=click.Choice(['general', 'reference', 'target']), help='–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
@click.option('--tags', '-t', help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.pass_context
def docs(ctx, list_docs, info, delete, stats, category, tags):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."""
    cli_instance = ctx.obj['cli']
    
    try:
        if list_docs:
            category_filter = DocumentCategory(category) if category else None
            tags_filter = [tag.strip() for tag in tags.split(',') if tag.strip()] if tags else None
            _list_documents(cli_instance, category_filter, tags_filter)
        elif info:
            _show_document_info(cli_instance, info)
        elif delete:
            if Confirm.ask(f"–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç {delete}?"):
                if cli_instance.document_manager.delete_document(delete):
                    console.print(f"[green]‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {delete} —É–¥–∞–ª–µ–Ω")
                else:
                    console.print(f"[red]‚ùå –î–æ–∫—É–º–µ–Ω—Ç {delete} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif stats:
            _show_collection_stats(cli_instance)
        else:
            console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π: --list, --info, --delete, --stats")
            
    except DocumentManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: {e}")


@cli.command()
@click.argument('document_id')
@click.option('--category', '-c', type=click.Choice(['general', 'reference', 'target']), help='–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
@click.option('--tags', '-t', help='–ù–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.option('--add-tag', multiple=True, help='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥')
@click.option('--remove-tag', multiple=True, help='–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥')
@click.pass_context
def manage_doc(ctx, document_id, category, tags, add_tag, remove_tag):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    cli_instance = ctx.obj['cli']
    
    try:
        # Check if document exists
        doc_info = cli_instance.document_manager.get_document_info(document_id)
        if not doc_info:
            console.print(f"[red]‚ùå –î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        
        changes_made = False
        
        # Update category
        if category:
            new_category = DocumentCategory(category)
            if cli_instance.document_manager.update_document_category(document_id, new_category):
                console.print(f"[green]‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {category}")
                changes_made = True
            else:
                console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # Update tags
        if tags is not None:
            new_tags = [tag.strip() for tag in tags.split(',') if tag.strip()]
            if cli_instance.document_manager.update_document_tags(document_id, new_tags):
                console.print(f"[green]‚úÖ –¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(new_tags) if new_tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'}")
                changes_made = True
            else:
                console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # Handle individual tag operations
        if add_tag or remove_tag:
            current_tags = doc_info.get('tags', [])
            if isinstance(current_tags, str):
                current_tags = current_tags.split(',') if current_tags else []
            
            # Add tags
            for tag in add_tag:
                if tag not in current_tags:
                    current_tags.append(tag)
            
            # Remove tags
            for tag in remove_tag:
                if tag in current_tags:
                    current_tags.remove(tag)
            
            if cli_instance.document_manager.update_document_tags(document_id, current_tags):
                console.print(f"[green]‚úÖ –¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(current_tags) if current_tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'}")
                changes_made = True
            else:
                console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        if not changes_made:
            console.print("[yellow]–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
            console.print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --category, --tags, --add-tag –∏–ª–∏ --remove-tag")
        
    except DocumentManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {e}")
        sys.exit(1)


@cli.command()
@click.pass_context
def formats(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤."""
    cli_instance = ctx.obj['cli']
    
    try:
        supported_extensions = cli_instance.document_manager.get_supported_file_types()
        
        table = Table(title="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤")
        table.add_column("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", style="green")
        
        format_info = {
            '.txt': ('Plain Text', '–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞'),
            '.md': ('Markdown', '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤'),
            '.docx': ('Microsoft Word', '–¢–µ–∫—Å—Ç, —Ç–∞–±–ª–∏—Ü—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'),
            '.pdf': ('PDF Document', '–¢–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ'),
            '.rtf': ('Rich Text Format', '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
        }
        
        for ext in supported_extensions:
            desc, features = format_info.get(ext, ('Unknown', 'Basic text extraction'))
            table.add_row(ext.upper(), desc, features)
        
        console.print(table)
        
        console.print("\n[yellow]üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:[/yellow]")
        console.print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --show-text –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        console.print("‚Ä¢ PDF —Ñ–∞–π–ª—ã: –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ PDF")
        console.print("‚Ä¢ DOCX —Ñ–∞–π–ª—ã: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        console.print("‚Ä¢ RTF —Ñ–∞–π–ª—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {e}")


@cli.command()
@click.pass_context
def status(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    cli_instance = ctx.obj['cli']
    
    # Check Ollama connection
    ollama_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if cli_instance.ollama_client.health_check() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # Get available models
    try:
        models = cli_instance.ollama_client.list_available_models()
        models_text = f"{len(models)} –º–æ–¥–µ–ª–µ–π: {', '.join(models[:3])}" + ("..." if len(models) > 3 else "")
    except:
        models_text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    # Get document stats
    doc_stats = cli_instance.document_manager.get_collection_stats()
    
    # Get session stats
    session_stats = cli_instance.session_manager.get_session_stats()
    
    # Get performance stats
    from ..utils.performance_monitor import performance_monitor
    perf_stats = performance_monitor.get_operation_stats()
    
    # Calculate average processing times
    avg_times = {}
    for op, stats in perf_stats.items():
        if stats.get('count', 0) > 0:
            avg_times[op] = stats.get('avg_duration', 0)
    
    # Get system resources
    import psutil
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        resources_text = (
            f"CPU: {cpu_percent:.1f}% | "
            f"RAM: {memory.percent:.1f}% | "
            f"–î–∏—Å–∫: {(disk.used/disk.total)*100:.1f}%"
        )
    except:
        resources_text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    status_panel = Panel(
        f"[bold]–°—Ç–∞—Ç—É—Å AI –ê–≥–µ–Ω—Ç–∞[/bold]\n\n"
        f"ü§ñ Ollama: {ollama_status}\n"
        f"üìö –ú–æ–¥–µ–ª–∏: {models_text}\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {doc_stats.get('total_documents', 0)} ({doc_stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤)\n"
        f"üí¨ –°–µ—Å—Å–∏–∏: {session_stats.get('active_sessions', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö / {session_stats.get('total_sessions', 0)} –≤—Å–µ–≥–æ\n"
        f"üí≠ –°–æ–æ–±—â–µ–Ω–∏—è: {session_stats.get('total_messages', 0)} –≤—Å–µ–≥–æ\n"
        f"‚ö° –†–µ—Å—É—Ä—Å—ã: {resources_text}\n"
        f"üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {sum(stats.get('count', 0) for stats in perf_stats.values())}",
        title="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )
    
    console.print(status_panel)


@cli.command()
@click.option('--stats', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
@click.option('--slow', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')
@click.option('--reset', is_flag=True, help='–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
@click.option('--operation', '-o', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏')
@click.pass_context
def performance(ctx, stats, slow, reset, operation):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    from ..utils.performance_monitor import performance_monitor
    
    if reset:
        if Confirm.ask("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?"):
            performance_monitor.reset_stats()
            console.print("[green]‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω–∞")
        return
    
    if slow:
        slow_ops = performance_monitor.get_slow_operations()
        
        if not slow_ops:
            console.print("[green]‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return
        
        table = Table(title="–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        table.add_column("–û–ø–µ—Ä–∞—Ü–∏—è", style="cyan")
        table.add_column("–í—Ä–µ–º—è", style="red")
        table.add_column("–î–∞—Ç–∞", style="dim")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
        
        for op in slow_ops[-20:]:  # Last 20 slow operations
            status = "‚úÖ –£—Å–ø–µ—Ö" if op.success else "‚ùå –û—à–∏–±–∫–∞"
            time_str = f"{op.duration:.2f}—Å"
            date_str = datetime.fromtimestamp(op.start_time).strftime("%H:%M:%S")
            
            table.add_row(op.operation, time_str, date_str, status)
        
        console.print(table)
        return
    
    if stats:
        perf_stats = performance_monitor.get_operation_stats(operation)
        
        if operation and not perf_stats:
            console.print(f"[yellow]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '{operation}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if operation:
            # Single operation stats
            stats_data = perf_stats
            console.print(Panel(
                f"[bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}[/bold]\n\n"
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats_data.get('count', 0)}\n"
                f"–£—Å–ø–µ—à–Ω—ã—Ö: {stats_data.get('success_count', 0)}\n"
                f"–û—à–∏–±–æ–∫: {stats_data.get('error_count', 0)}\n"
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats_data.get('avg_duration', 0):.2f}—Å\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {stats_data.get('min_duration', 0):.2f}—Å\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {stats_data.get('max_duration', 0):.2f}—Å\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {stats_data.get('last_execution', '–ù–∏–∫–æ–≥–¥–∞')}",
                title=f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation}"
            ))
        else:
            # All operations stats
            if not perf_stats:
                console.print("[yellow]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–∞")
                return
            
            table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            table.add_column("–û–ø–µ—Ä–∞—Ü–∏—è", style="cyan")
            table.add_column("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π", style="green")
            table.add_column("–£—Å–ø–µ—à–Ω—ã—Ö", style="blue")
            table.add_column("–û—à–∏–±–æ–∫", style="red")
            table.add_column("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", style="yellow")
            table.add_column("–ú–∞–∫—Å. –≤—Ä–µ–º—è", style="magenta")
            
            for op_name, op_stats in sorted(perf_stats.items()):
                success_rate = (op_stats.get('success_count', 0) / max(op_stats.get('count', 1), 1)) * 100
                
                table.add_row(
                    op_name,
                    str(op_stats.get('count', 0)),
                    f"{op_stats.get('success_count', 0)} ({success_rate:.1f}%)",
                    str(op_stats.get('error_count', 0)),
                    f"{op_stats.get('avg_duration', 0):.2f}—Å",
                    f"{op_stats.get('max_duration', 0):.2f}—Å"
                )
            
            console.print(table)
        return
    
    # Default: show recent metrics
    recent_metrics = performance_monitor.get_recent_metrics(limit=10)
    
    if not recent_metrics:
        console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        return
    
    table = Table(title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    table.add_column("–í—Ä–µ–º—è", style="dim")
    table.add_column("–û–ø–µ—Ä–∞—Ü–∏—è", style="cyan")
    table.add_column("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", style="yellow")
    table.add_column("–ü–∞–º—è—Ç—å", style="blue")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
    
    for metric in recent_metrics:
        time_str = datetime.fromtimestamp(metric.start_time).strftime("%H:%M:%S")
        duration_str = f"{metric.duration:.2f}—Å" if metric.duration else "N/A"
        memory_str = f"{metric.memory_delta:+.1f}MB" if metric.memory_delta else "N/A"
        status = "‚úÖ" if metric.success else "‚ùå"
        
        table.add_row(time_str, metric.operation, duration_str, memory_str, status)
    
    console.print(table)


@cli.command()
@click.option('--stats', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞')
@click.option('--clear', is_flag=True, help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏')
@click.option('--cleanup', is_flag=True, help='–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏')
@click.pass_context
def cache(ctx, stats, clear, cleanup):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º —Å–∏—Å—Ç–µ–º—ã."""
    from ..utils.cache_manager import cache_manager
    
    if clear:
        if Confirm.ask("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏?"):
            cache_manager.clear_all_caches()
            console.print("[green]‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")
        return
    
    if cleanup:
        cleanup_stats = cache_manager.query_cache.cleanup_expired()
        total_cleaned = cleanup_stats.get('total_expired', 0)
        if total_cleaned > 0:
            console.print(f"[green]‚úÖ –û—á–∏—â–µ–Ω–æ {total_cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        else:
            console.print("[green]‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if stats:
        cache_stats = cache_manager.get_global_stats()
        query_stats = cache_stats.get('query_cache_stats', {})
        
        if not query_stats:
            console.print("[yellow]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        query_cache = query_stats.get('query_cache', {})
        embedding_cache = query_stats.get('embedding_cache', {})
        
        # Query cache stats
        console.print(Panel(
            f"[bold]–ö—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤:[/bold]\n"
            f"–ó–∞–ø–∏—Å–µ–π: {query_cache.get('size', 0)}/{query_cache.get('max_size', 0)}\n"
            f"–ü–æ–ø–∞–¥–∞–Ω–∏–π: {query_cache.get('hits', 0)}\n"
            f"–ü—Ä–æ–º–∞—Ö–æ–≤: {query_cache.get('misses', 0)}\n"
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {query_cache.get('hit_rate', 0):.1%}\n"
            f"–í—ã—Ç–µ—Å–Ω–µ–Ω–∏–π: {query_cache.get('evictions', 0)}\n"
            f"–†–∞–∑–º–µ—Ä: {query_cache.get('total_size_mb', 0):.1f} –ú–ë\n\n"
            f"[bold]–ö—ç—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:[/bold]\n"
            f"–ó–∞–ø–∏—Å–µ–π: {embedding_cache.get('size', 0)}/{embedding_cache.get('max_size', 0)}\n"
            f"–ü–æ–ø–∞–¥–∞–Ω–∏–π: {embedding_cache.get('hits', 0)}\n"
            f"–ü—Ä–æ–º–∞—Ö–æ–≤: {embedding_cache.get('misses', 0)}\n"
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {embedding_cache.get('hit_rate', 0):.1%}\n"
            f"–í—ã—Ç–µ—Å–Ω–µ–Ω–∏–π: {embedding_cache.get('evictions', 0)}\n"
            f"–†–∞–∑–º–µ—Ä: {embedding_cache.get('total_size_mb', 0):.1f} –ú–ë",
            title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"
        ))
        return
    
    # Default: show cache overview
    cache_stats = cache_manager.get_global_stats()
    query_stats = cache_stats.get('query_cache_stats', {})
    
    if query_stats:
        query_cache = query_stats.get('query_cache', {})
        embedding_cache = query_stats.get('embedding_cache', {})
        
        table = Table(title="–û–±–∑–æ—Ä –∫—ç—à–∞")
        table.add_column("–¢–∏–ø –∫—ç—à–∞", style="cyan")
        table.add_column("–ó–∞–ø–∏—Å–µ–π", style="green")
        table.add_column("–ü–æ–ø–∞–¥–∞–Ω–∏–π", style="blue")
        table.add_column("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", style="yellow")
        table.add_column("–†–∞–∑–º–µ—Ä", style="magenta")
        
        table.add_row(
            "–ó–∞–ø—Ä–æ—Å—ã",
            f"{query_cache.get('size', 0)}/{query_cache.get('max_size', 0)}",
            str(query_cache.get('hits', 0)),
            f"{query_cache.get('hit_rate', 0):.1%}",
            f"{query_cache.get('total_size_mb', 0):.1f} –ú–ë"
        )
        
        table.add_row(
            "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏",
            f"{embedding_cache.get('size', 0)}/{embedding_cache.get('max_size', 0)}",
            str(embedding_cache.get('hits', 0)),
            f"{embedding_cache.get('hit_rate', 0):.1%}",
            f"{embedding_cache.get('total_size_mb', 0):.1f} –ú–ë"
        )
        
        console.print(table)
    else:
        console.print("[yellow]–ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def _show_help():
    """Show help information."""
    help_text = """
[bold]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/bold]

‚Ä¢ [cyan]/help[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ [cyan]/history[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
‚Ä¢ [cyan]/check[/cyan] - –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ [cyan]/exit[/cyan] - –≤—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

[bold]–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:[/bold]

‚Ä¢ "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º?"
‚Ä¢ "–ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –¥–æ–≥–æ–≤–æ—Ä–µ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–µ?"

[bold]–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:[/bold]

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [cyan]--show-decision-tree[/cyan] –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [cyan]--web-visualization[/cyan] –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ [cyan]/viz[/cyan] –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è [cyan]VISUALIZATION_ENABLED=true[/cyan] –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–µ–π
"""
    console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞"))


def _show_session_history(cli_instance, session_id):
    """Show session history."""
    try:
        messages = cli_instance.session_manager.get_session_history(session_id, limit=10)
        
        if not messages:
            console.print("[yellow]–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ –ø—É—Å—Ç–∞")
            return
        
        table = Table(title=f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ {session_id}")
        table.add_column("–í—Ä–µ–º—è", style="cyan")
        table.add_column("–†–æ–ª—å", style="magenta")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white", max_width=60)
        
        for message in messages[-10:]:  # Last 10 messages
            role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if message.is_user_message() else "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            content = message.content[:100] + "..." if len(message.content) > 100 else message.content
            time_str = message.created_at.strftime("%H:%M:%S")
            
            table.add_row(time_str, role, content)
        
        console.print(table)
        
    except SessionManagerError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def _document_check_mode(cli_instance, session_id):
    """Document compliance check mode."""
    console.print(Panel(
        "[bold yellow]–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤[/bold yellow]\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'.",
        title="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
    ))
    
    while True:
        user_input = Prompt.ask("\n[bold blue]–§–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        if user_input.lower() in ['exit', 'quit']:
            break
        
        # Check if it's a file path
        document_filename = None
        if Path(user_input).exists():
            try:
                file_path = Path(user_input)
                document_filename = str(file_path)
                if file_path.suffix.lower() == '.docx':
                    if DocxDocument is None:
                        console.print("[red]‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        continue
                    doc = DocxDocument(file_path)
                    document_content = '\n'.join([paragraph.text for paragraph in doc.paragraphs if paragraph.text.strip()])
                else:
                    with open(user_input, 'r', encoding='utf-8') as f:
                        document_content = f.read()
            except Exception as e:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                continue
        else:
            document_content = user_input
        
        if not document_content.strip():
            console.print("[yellow]–ü—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç")
            continue
        
        # Process document check
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...", total=None)
            
            try:
                response = cli_instance.query_processor.process_document_check(
                    document_content=document_content,
                    session_id=session_id,
                    document_filename=document_filename
                )
                
                progress.update(task, description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
                
            except QueryProcessorError as e:
                progress.update(task, description="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚ùå")
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        
        # Display response
        _display_response(response)


def _display_response(response):
    """Display query response."""
    # Create markdown content
    response_md = Markdown(response.response)
    
    # Add metadata if available
    metadata_parts = []
    if response.confidence_score:
        confidence_percent = int(response.confidence_score * 100)
        metadata_parts.append(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
    
    if response.processing_time:
        metadata_parts.append(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
    
    if response.relevant_documents:
        metadata_parts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(response.relevant_documents)} –¥–æ–∫.")
    
    # Display response with proper markdown rendering
    console.print(Panel(response_md, title="ü§ñ –û—Ç–≤–µ—Ç", border_style="blue"))
    
    # Display metadata separately if available
    if metadata_parts:
        console.print(f"[dim]‚ÑπÔ∏è {' | '.join(metadata_parts)}[/dim]")


def _list_sessions(cli_instance):
    """List all sessions."""
    sessions = cli_instance.session_manager.list_sessions()
    
    if not sessions:
        console.print("[yellow]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return
    
    table = Table(title="–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
    table.add_column("ID", style="cyan")
    table.add_column("–°–æ–∑–¥–∞–Ω–∞", style="magenta")
    table.add_column("–û–±–Ω–æ–≤–ª–µ–Ω–∞", style="yellow")
    table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="green")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
    
    for session in sessions:
        created = session['created_at'][:19].replace('T', ' ')
        updated = session['updated_at'][:19].replace('T', ' ')
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if session['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        table.add_row(
            session['id'][:8] + "...",
            created,
            updated,
            str(session['message_count']),
            status
        )
    
    console.print(table)


def _list_documents(cli_instance, category_filter=None, tags_filter=None):
    """List all documents."""
    documents = cli_instance.document_manager.list_documents(
        category_filter=category_filter,
        tags_filter=tags_filter
    )
    
    if not documents:
        console.print("[yellow]–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return
    
    filter_info = []
    if category_filter:
        filter_info.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter.value}")
    if tags_filter:
        filter_info.append(f"—Ç–µ–≥–∏: {', '.join(tags_filter)}")
    
    title = "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    if filter_info:
        title += f" ({', '.join(filter_info)})"
    
    table = Table(title=title)
    table.add_column("ID", style="cyan")
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
    table.add_column("–¢–∏–ø", style="magenta")
    table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="blue")
    table.add_column("–¢–µ–≥–∏", style="yellow")
    table.add_column("–ß–∞–Ω–∫–æ–≤", style="green")
    table.add_column("–ó–∞–≥—Ä—É–∂–µ–Ω", style="dim")
    
    for doc in documents:
        upload_date = doc['upload_date'][:19].replace('T', ' ') if doc['upload_date'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # Format tags
        doc_tags = doc.get('tags', [])
        if isinstance(doc_tags, str):
            doc_tags = doc_tags.split(',') if doc_tags else []
        tags_str = ', '.join(doc_tags[:2]) if doc_tags else "–Ω–µ—Ç"
        if len(doc_tags) > 2:
            tags_str += f" +{len(doc_tags) - 2}"
        
        table.add_row(
            doc['id'][:8] + "...",
            doc['title'][:25] + ("..." if len(doc['title']) > 25 else ""),
            doc['file_type'],
            doc.get('category', 'general'),
            tags_str,
            str(doc['chunk_count']),
            upload_date
        )
    
    console.print(table)


def _show_document_info(cli_instance, doc_id):
    """Show document information."""
    doc_info = cli_instance.document_manager.get_document_info(doc_id)
    
    if not doc_info:
        console.print(f"[red]‚ùå –î–æ–∫—É–º–µ–Ω—Ç {doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    info_text = f"""
[bold]ID:[/bold] {doc_info['id']}
[bold]–ù–∞–∑–≤–∞–Ω–∏–µ:[/bold] {doc_info['title']}
[bold]–¢–∏–ø —Ñ–∞–π–ª–∞:[/bold] {doc_info['file_type']}
[bold]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:[/bold] {doc_info['chunk_count']}
[bold]–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:[/bold] {doc_info['upload_date']}
"""
    
    if doc_info.get('metadata'):
        info_text += f"\n[bold]–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:[/bold]\n"
        for key, value in doc_info['metadata'].items():
            info_text += f"  {key}: {value}\n"
    
    console.print(Panel(info_text, title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"))


def _show_collection_stats(cli_instance):
    """Show collection statistics."""
    stats = cli_instance.document_manager.get_collection_stats()
    
    stats_text = f"""
[bold]–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:[/bold] {stats.get('total_documents', 0)}
[bold]–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤:[/bold] {stats.get('total_chunks', 0)}
[bold]–°—Ä–µ–¥–Ω–µ–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:[/bold] {stats.get('average_chunks_per_document', 0):.1f}
"""
    
    console.print(Panel(stats_text, title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"))


def _find_files_for_batch_upload(path: str, pattern: str, recursive: bool) -> List[Path]:
    """Find files for batch upload based on pattern and recursion settings.
    
    Args:
        path: Path to search (file or directory).
        pattern: File patterns to match (comma-separated).
        recursive: Whether to search recursively.
        
    Returns:
        List of file paths to upload.
    """
    path_obj = Path(path)
    files_to_upload = []
    
    # Parse patterns
    patterns = [p.strip() for p in pattern.split(',')]
    
    if path_obj.is_file():
        # Single file provided
        files_to_upload.append(path_obj)
    elif path_obj.is_dir():
        # Directory provided - find matching files
        for pattern_str in patterns:
            if recursive:
                files_to_upload.extend(path_obj.rglob(pattern_str))
            else:
                files_to_upload.extend(path_obj.glob(pattern_str))
    
    # Remove duplicates and sort
    files_to_upload = sorted(list(set(files_to_upload)))
    
    # Filter out non-files (in case glob matched directories)
    files_to_upload = [f for f in files_to_upload if f.is_file()]
    
    return files_to_upload


def _show_batch_upload_preview(files: List[Path]) -> None:
    """Show preview of files that will be uploaded.
    
    Args:
        files: List of file paths.
    """
    table = Table(title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∑–∫–∏")
    table.add_column("‚Ññ", style="cyan", width=4)
    table.add_column("–§–∞–π–ª", style="white")
    table.add_column("–†–∞–∑–º–µ—Ä", style="green", width=10)
    table.add_column("–¢–∏–ø", style="magenta", width=8)
    
    for i, file_path in enumerate(files, 1):
        try:
            size = file_path.stat().st_size
            size_str = _format_file_size(size)
        except:
            size_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        table.add_row(
            str(i),
            str(file_path),
            size_str,
            file_path.suffix[1:] if file_path.suffix else "unknown"
        )
    
    console.print(table)


def _format_file_size(size_bytes: int) -> str:
    """Format file size in human readable format.
    
    Args:
        size_bytes: Size in bytes.
        
    Returns:
        Formatted size string.
    """
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"


def _perform_batch_upload(
    cli_instance, 
    files: List[Path], 
    common_metadata: Dict[str, str],
    category: DocumentCategory,
    tags: List[str],
    skip_errors: bool
) -> Dict[str, Any]:
    """Perform batch upload of files with progress tracking.
    
    Args:
        cli_instance: CLI instance with document manager.
        files: List of files to upload.
        common_metadata: Common metadata for all files.
        category: Category for all files.
        tags: Tags for all files.
        skip_errors: Whether to continue on individual file errors.
        
    Returns:
        Results dictionary with success/failure counts and details.
    """
    from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn
    import os
    
    results = {
        'total_files': len(files),
        'successful': [],
        'failed': [],
        'skipped': []
    }
    
    # Skip progress bar in tests
    use_progress = not os.getenv('PYTEST_CURRENT_TEST')
    
    if use_progress:
        progress_context = Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TextColumn("({task.completed}/{task.total})"),
            TimeRemainingColumn(),
            console=console
        )
    else:
        # Simple context manager for tests
        from contextlib import nullcontext
        progress_context = nullcontext()
    
    with progress_context as progress:
        
        if use_progress and progress:
            upload_task = progress.add_task(
                "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...", 
                total=len(files)
            )
        else:
            upload_task = None
        
        for i, file_path in enumerate(files):
            if use_progress and progress and upload_task is not None:
                progress.update(
                    upload_task, 
                    description=f"–ó–∞–≥—Ä—É–∑–∫–∞: {file_path.name}",
                    completed=i
                )
            
            try:
                # Prepare metadata for this file
                file_metadata = common_metadata.copy()
                file_metadata['original_path'] = str(file_path)
                file_metadata['batch_upload'] = 'true'
                
                # Upload document
                doc_id = cli_instance.document_manager.upload_document(
                    file_path=str(file_path),
                    metadata=file_metadata,
                    category=category,
                    tags=tags
                )
                
                results['successful'].append({
                    'file': str(file_path),
                    'doc_id': doc_id,
                    'size': file_path.stat().st_size
                })
                
            except Exception as e:
                error_info = {
                    'file': str(file_path),
                    'error': str(e)
                }
                
                if skip_errors:
                    results['failed'].append(error_info)
                    logger.warning(f"Failed to upload {file_path}: {e}")
                else:
                    results['failed'].append(error_info)
                    if use_progress and progress and upload_task is not None:
                        progress.update(upload_task, description=f"–û—à–∏–±–∫–∞: {file_path.name}")
                    break
        
        if use_progress and progress and upload_task is not None:
            progress.update(
                upload_task, 
                completed=len(files),
                description="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            )
    
    return results


def _show_batch_upload_results(results: Dict[str, Any]) -> None:
    """Show results of batch upload operation.
    
    Args:
        results: Results dictionary from batch upload.
    """
    total = results['total_files']
    successful = len(results['successful'])
    failed = len(results['failed'])
    
    # Summary panel
    if failed == 0:
        status_color = "green"
        status_icon = "‚úÖ"
        status_text = "–í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    elif successful == 0:
        status_color = "red"
        status_icon = "‚ùå"
        status_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
    else:
        status_color = "yellow"
        status_icon = "‚ö†Ô∏è"
        status_text = "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    
    summary_text = f"""
[bold]–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:[/bold] {total}
[bold green]–£—Å–ø–µ—à–Ω–æ:[/bold green] {successful}
[bold red]–û—à–∏–±–∫–∏:[/bold red] {failed}
"""
    
    console.print(Panel(
        summary_text,
        title=f"{status_icon} {status_text}",
        border_style=status_color
    ))
    
    # Show successful uploads
    if results['successful']:
        success_table = Table(title="–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        success_table.add_column("–§–∞–π–ª", style="white")
        success_table.add_column("ID –¥–æ–∫—É–º–µ–Ω—Ç–∞", style="cyan")
        success_table.add_column("–†–∞–∑–º–µ—Ä", style="green")
        
        for item in results['successful']:
            success_table.add_row(
                Path(item['file']).name,
                item['doc_id'][:8] + "...",
                _format_file_size(item['size'])
            )
        
        console.print(success_table)
    
    # Show failed uploads
    if results['failed']:
        error_table = Table(title="–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
        error_table.add_column("–§–∞–π–ª", style="white")
        error_table.add_column("–û—à–∏–±–∫–∞", style="red")
        
        for item in results['failed']:
            error_table.add_row(
                Path(item['file']).name,
                item['error'][:50] + ("..." if len(item['error']) > 50 else "")
            )
        
        console.print(error_table)


def _select_reference_documents_interactive(cli_instance) -> Optional[List[str]]:
    """Interactive selection of reference documents.
    
    Args:
        cli_instance: CLI instance with document manager.
        
    Returns:
        List of selected document IDs or None if cancelled.
    """
    try:
        # Get all reference documents
        reference_docs = cli_instance.document_manager.get_reference_documents()
        
        if not reference_docs:
            console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            console.print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'upload-reference'")
            return None
        
        console.print(Panel(
            "[bold blue]–í—ã–±–æ—Ä —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏[/bold blue]\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä"
        ))
        
        # Display available reference documents
        table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        table.add_column("‚Ññ", style="cyan", width=4)
        table.add_column("ID", style="dim")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
        table.add_column("–¢–µ–≥–∏", style="yellow")
        table.add_column("–ß–∞–Ω–∫–æ–≤", style="green", width=8)
        
        for i, doc in enumerate(reference_docs, 1):
            doc_tags = doc.get('tags', [])
            if isinstance(doc_tags, str):
                doc_tags = doc_tags.split(',') if doc_tags else []
            tags_str = ', '.join(doc_tags) if doc_tags else "–Ω–µ—Ç"
            
            table.add_row(
                str(i),
                doc['id'][:8] + "...",
                doc['title'][:40] + ("..." if len(doc['title']) > 40 else ""),
                tags_str,
                str(doc['chunk_count'])
            )
        
        console.print(table)
        
        # Get user selection
        console.print("\n[bold]–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:[/bold]")
        console.print("‚Ä¢ –ù–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)")
        console.print("‚Ä¢ 'all' - –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        console.print("‚Ä¢ 'cancel' - –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        selection = Prompt.ask("\n[bold blue]–í–∞—à –≤—ã–±–æ—Ä")
        
        if selection.lower() in ['cancel', '–æ—Ç–º–µ–Ω–∞']:
            return None
        
        if selection.lower() == 'all':
            return [doc['id'] for doc in reference_docs]
        
        # Parse selection
        try:
            selected_indices = [int(x.strip()) for x in selection.split(',') if x.strip()]
            selected_docs = []
            
            for idx in selected_indices:
                if 1 <= idx <= len(reference_docs):
                    selected_docs.append(reference_docs[idx - 1]['id'])
                else:
                    console.print(f"[yellow]‚ö†Ô∏è –ù–æ–º–µ—Ä {idx} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ–ø—É—â–µ–Ω")
            
            if not selected_docs:
                console.print("[red]‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                return None
            
            # Show selected documents
            selected_titles = []
            for doc_id in selected_docs:
                for doc in reference_docs:
                    if doc['id'] == doc_id:
                        selected_titles.append(doc['title'])
                        break
            
            console.print(f"\n[green]‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(selected_docs)}")
            for title in selected_titles:
                console.print(f"  ‚Ä¢ {title}")
            
            return selected_docs
            
        except ValueError:
            console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞")
            return None
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return None


def _display_compliance_report(response, reference_doc_ids=None):
    """Display compliance check report.
    
    Args:
        response: Query response with compliance analysis.
        reference_doc_ids: List of reference document IDs used.
    """
    # Create enhanced markdown content for compliance report
    report_content = response.response
    
    # Add metadata
    metadata_parts = []
    if response.confidence_score:
        confidence_percent = int(response.confidence_score * 100)
        
        # Add confidence breakdown if available
        confidence_text = f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%"
        if hasattr(response, 'confidence_breakdown') and response.confidence_breakdown:
            breakdown = response.confidence_breakdown
            context_pct = int(breakdown['context'] * 100)
            content_pct = int(breakdown['content'] * 100) 
            processing_pct = int(breakdown['processing'] * 100)
            confidence_text += f" (–¥–æ–∫—É–º–µ–Ω—Ç—ã: {context_pct}%, –∞–Ω–∞–ª–∏–∑: {content_pct}%, –≤—Ä–µ–º—è: {processing_pct}%)"
        
        metadata_parts.append(confidence_text)
    
    if response.processing_time:
        metadata_parts.append(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {response.processing_time:.2f}—Å")
    
    if reference_doc_ids:
        metadata_parts.append(f"–≠—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(reference_doc_ids)}")
    elif response.relevant_documents:
        metadata_parts.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(response.relevant_documents)}")
    
    # Display main report
    console.print(Panel(
        Markdown(report_content), 
        title="üìã –û—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏", 
        border_style="blue"
    ))
    
    # Display metadata
    if metadata_parts:
        console.print(f"[dim]‚ÑπÔ∏è {' | '.join(metadata_parts)}[/dim]")
    
    # Display source documents if available
    if response.relevant_documents:
        console.print(f"\n[bold]üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(response.relevant_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤):[/bold]")
        for i, doc_id in enumerate(response.relevant_documents[:5], 1):  # Show first 5
            console.print(f"  {i}. {doc_id[:8]}...")
        if len(response.relevant_documents) > 5:
            console.print(f"  ... –∏ –µ—â–µ {len(response.relevant_documents) - 5} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")