#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π.
"""

import sys
import os
import uuid
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
from datetime import datetime

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞–ø—Ä—è–º—É—é
class QueryType(Enum):
    """Types of queries for decision tree categorization."""
    GENERAL_QUESTION = "general_question"
    COMPLIANCE_CHECK = "compliance_check"

@dataclass
class DecisionNode:
    """Represents a node in the decision tree."""
    id: str
    label: str
    probability: float
    description: str = ""
    children: List['DecisionNode'] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def add_child(self, child: 'DecisionNode') -> None:
        """Add a child node."""
        self.children.append(child)

@dataclass
class DecisionTree:
    """Represents a complete decision tree."""
    id: str
    root: DecisionNode
    query_type: QueryType
    metadata: Dict[str, Any] = field(default_factory=dict)

def create_test_tree():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
    root_node = DecisionNode(
        id=str(uuid.uuid4()),
        label="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª",
        probability=1.0,
        description="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞"
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
    child1 = DecisionNode(
        id=str(uuid.uuid4()),
        label="–ü–µ—Ä–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª",
        probability=0.7,
        description="–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞"
    )
    
    child2 = DecisionNode(
        id=str(uuid.uuid4()),
        label="–í—Ç–æ—Ä–æ–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª", 
        probability=0.3,
        description="–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞"
    )
    
    root_node.add_child(child1)
    root_node.add_child(child2)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ
    tree = DecisionTree(
        id=str(uuid.uuid4()),
        root=root_node,
        query_type=QueryType.GENERAL_QUESTION
    )
    
    return tree

def debug_tree_structure(tree):
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞."""
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–µ–≤–µ:")
    print(f"   ID –¥–µ—Ä–µ–≤–∞: {tree.id}")
    print(f"   –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {tree.query_type}")
    
    print(f"\nüå≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–Ω–µ–≤–æ–º —É–∑–ª–µ:")
    root = tree.root
    print(f"   ID: {root.id}")
    print(f"   Label: '{root.label}'")
    print(f"   Description: '{root.description}'")
    print(f"   Probability: {root.probability}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {len(root.children)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
    for i, child in enumerate(root.children):
        print(f"\nüë∂ –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª {i+1}:")
        print(f"   ID: {child.id}")
        print(f"   Label: '{child.label}'")
        print(f"   Description: '{child.description}'")
        print(f"   Probability: {child.probability}")

def test_exporter_conversion(tree):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–∞–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ."""
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞:")
    
    def convert_node(node):
        """–ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞."""
        node_json = {
            'id': getattr(node, 'id', str(uuid.uuid4())),
            'label': getattr(node, 'label', ''),
            'description': getattr(node, 'description', ''),
            'probability': getattr(node, 'probability', 1.0),
        }
        
        children = []
        for child in getattr(node, 'children', []):
            children.append(convert_node(child))
        
        if children:
            node_json['children'] = children
        
        return node_json
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
    root_json = convert_node(tree.root)
    
    print(f"   –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª JSON:")
    print(f"     ID: {root_json['id']}")
    print(f"     Label: '{root_json['label']}'")
    print(f"     Description: '{root_json['description']}'")
    print(f"     Probability: {root_json['probability']}")
    
    if 'children' in root_json:
        for i, child_json in enumerate(root_json['children']):
            print(f"   –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª {i+1} JSON:")
            print(f"     ID: {child_json['id']}")
            print(f"     Label: '{child_json['label']}'")
            print(f"     Description: '{child_json['description']}'")
            print(f"     Probability: {child_json['probability']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        print("üöÄ –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        tree = create_test_tree()
        
        # –û—Ç–ª–∞–∂–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        debug_tree_structure(tree)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        test_exporter_conversion(tree)
        
        print(f"\n" + "=" * 60)
        print("‚ú® –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()