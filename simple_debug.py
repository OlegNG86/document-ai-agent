#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π."""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['VISUALIZATION_ENABLED'] = 'true'

from ai_agent.utils.decision_tree import DecisionTreeBuilder, QueryType
from ai_agent.utils.tree_exporter import DecisionTreeExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    logger.info("=== –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tree_builder = DecisionTreeBuilder()
        tree_exporter = DecisionTreeExporter()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        queries = [
            "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º?",
            "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ?",
            "–ö–∞–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è?"
        ]
        
        for i, query in enumerate(queries, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {query} ---")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ
            tree = tree_builder.build_general_query_tree(
                query=query,
                context_available=True
            )
            
            logger.info(f"–î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {tree.id}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ
            tree_path = tree_exporter.export_tree(
                tree=tree,
                query_type="general_question",
                query_text=query
            )
            
            if tree_path:
                logger.info(f"‚úÖ –î–µ—Ä–µ–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {tree_path}")
                
                # –ü–æ–ª—É—á–∞–µ–º URL
                viz_url = tree_exporter.get_visualization_url(tree_path)
                logger.info(f"üîó URL –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {viz_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(tree_path)
                logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        export_dir = "./visualization/data/decision_trees"
        files = [f for f in os.listdir(export_dir) if f.endswith('.json')]
        logger.info(f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤: {len(files)}")
        
        for file in files[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
            file_path = os.path.join(export_dir, file)
            file_size = os.path.getsize(file_path)
            logger.info(f"  - {file} ({file_size} –±–∞–π—Ç)")
            
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    main()