import streamlit as st
import networkx as nx
import json
import os
import plotly.graph_objects as go
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞",
    page_icon="üå≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π
DATA_PATH = os.environ.get("DECISION_TREE_DATA_PATH", "./data/decision_trees")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏ —Ä–µ—à–µ–Ω–∏–π
def load_decision_trees():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π"""
    trees = []
    if os.path.exists(DATA_PATH):
        for file in os.listdir(DATA_PATH):
            if file.endswith('.json'):
                try:
                    with open(os.path.join(DATA_PATH, file), 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        created_at = data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        query_type = data.get('query_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        trees.append({
                            'filename': file,
                            'created_at': created_at,
                            'query_type': query_type,
                            'display_name': f"{query_type} ({created_at})"
                        })
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file}: {str(e)}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    return sorted(trees, key=lambda x: x.get('created_at', ''), reverse=True)

def load_tree_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π –∏–∑ JSON"""
    try:
        with open(os.path.join(DATA_PATH, filename), 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞: {str(e)}")
        return None

def build_graph(tree_data):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π"""
    G = nx.DiGraph()
    
    def add_nodes_edges(node, parent=None):
        node_id = node.get('id', str(hash(node.get('label', ''))))
        prob = node.get('probability', 1.0)
        label = node.get('label', '')
        description = node.get('description', '')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
        G.add_node(node_id, label=label, probability=prob, description=description)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—Ä–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
        if parent:
            G.add_edge(parent, node_id)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
        for child in node.get('children', []):
            add_nodes_edges(child, node_id)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
    if 'root' in tree_data:
        add_nodes_edges(tree_data['root'])
    else:
        st.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª.")
    
    return G

def get_node_color(probability):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —É–∑–ª–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    if probability >= 0.7:
        return '#2ECC71'  # –ó–µ–ª–µ–Ω—ã–π
    elif probability >= 0.4:
        return '#F1C40F'  # –ñ–µ–ª—Ç—ã–π
    else:
        return '#E74C3C'  # –ö—Ä–∞—Å–Ω—ã–π

def visualize_tree_plotly(G):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å –ø–æ–º–æ—â—å—é Plotly"""
    if not G or len(G.nodes()) == 0:
        st.warning("–ì—Ä–∞—Ñ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∑–ª–æ–≤.")
        return None
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º graphviz –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
        pos = nx.nx_agraph.graphviz_layout(G, prog="dot")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–∑–∏—Ü–∏–π —É–∑–ª–æ–≤: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥.")
        pos = nx.spring_layout(G)
    
    edge_x = []
    edge_y = []
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.extend([x0, x1, None])
        edge_y.extend([y0, y1, None])

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=1.5, color='#888'),
        hoverinfo='none',
        mode='lines')

    node_x = []
    node_y = []
    node_text = []
    node_size = []
    node_color = []
    
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        
        label = G.nodes[node].get('label', '')
        prob = G.nodes[node].get('probability', 0)
        desc = G.nodes[node].get('description', '')
        
        node_text.append(f"<b>{label}</b><br>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.2f}<br>{desc}")
        node_size.append(25 + prob * 20)
        node_color.append(get_node_color(prob))

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='text',
        text=node_text,
        marker=dict(
            color=node_color,
            size=node_size,
            line=dict(width=2, color='#FFFFFF'))
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —É–∑–ª–æ–≤
    node_label_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='text',
        text=[G.nodes[node].get('label', '').split(' ')[0] for node in G.nodes()],
        textposition="middle center",
        textfont=dict(
            family="Arial",
            size=10,
            color="black"
        ),
        hoverinfo='none'
    )

    fig = go.Figure(data=[edge_trace, node_trace, node_label_trace],
                 layout=go.Layout(
                    title='<b>–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π</b>',
                    titlefont_size=18,
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20,l=5,r=5,t=40),
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    height=800,
                    plot_bgcolor='rgba(250,250,250,1)')
                    )
    
    return fig

def calculate_paths(G, root_node=None):
    """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø—É—Ç–µ–π –≤ –¥–µ—Ä–µ–≤–µ –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç—å–µ–≤"""
    if not G or len(G.nodes()) == 0:
        return []
    
    # –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É–∑–µ–ª –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Ä–µ–±–µ—Ä
    if root_node is None:
        root_candidates = [n for n in G.nodes() if G.in_degree(n) == 0]
        if not root_candidates:
            return []
        root_node = root_candidates[0]
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–∏—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (–±–µ–∑ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ä–µ–±–µ—Ä)
    leaf_nodes = [n for n in G.nodes() if G.out_degree(n) == 0]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not leaf_nodes:
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç—å–µ–≤
    all_paths = []
    for leaf in leaf_nodes:
        try:
            for path in nx.all_simple_paths(G, source=root_node, target=leaf):
                path_info = {
                    "nodes": path,
                    "labels": [G.nodes[n].get('label', '') for n in path],
                    "probabilities": [G.nodes[n].get('probability', 1.0) for n in path],
                    "total_probability": 1.0
                }
                
                # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
                for prob in path_info["probabilities"]:
                    path_info["total_probability"] *= prob
                
                all_paths.append(path_info)
        except nx.NetworkXNoPath:
            continue
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É—Ç–µ–π –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
    return sorted(all_paths, key=lambda x: x["total_probability"], reverse=True)

def export_graph_to_image(G, format='png', dpi=300):
    """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    plt.figure(figsize=(12, 8), dpi=dpi)
    
    try:
        pos = nx.nx_agraph.graphviz_layout(G, prog="dot")
    except Exception:
        pos = nx.spring_layout(G)
    
    # –†–∏—Å—É–µ–º —É–∑–ª—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    node_colors = [get_node_color(G.nodes[n].get('probability', 0)) for n in G.nodes()]
    node_sizes = [300 + G.nodes[n].get('probability', 0) * 500 for n in G.nodes()]
    
    nx.draw(G, pos, with_labels=True, node_color=node_colors, 
            node_size=node_sizes, font_size=8, font_weight='bold',
            edge_color='gray', arrows=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    plt.title("–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π", fontsize=16)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format=format, bbox_inches='tight')
    buf.seek(0)
    
    plt.close()
    
    return buf

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üå≥ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞")
st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∞–Ω–∞–ª–∏–∑ –¥–µ—Ä–µ–≤—å–µ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤
trees = load_decision_trees()

if not trees:
    st.warning("–î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è.")
    st.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: {os.path.abspath(DATA_PATH)}")
else:
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
    query_types = list(set(tree['query_type'] for tree in trees))
    selected_type = st.sidebar.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞",
        ["–í—Å–µ"] + query_types
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ —Ç–∏–ø—É
    filtered_trees = trees
    if selected_type != "–í—Å–µ":
        filtered_trees = [tree for tree in trees if tree['query_type'] == selected_type]
    
    # –í—ã–±–æ—Ä –¥–µ—Ä–µ–≤–∞
    tree_options = {tree['display_name']: tree['filename'] for tree in filtered_trees}
    selected_tree_name = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π",
        list(tree_options.keys())
    )
    
    selected_tree_filename = tree_options[selected_tree_name]
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    tree_data = load_tree_data(selected_tree_filename)
    
    if tree_data:
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤–∞
        st.sidebar.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–µ–≤–µ")
        st.sidebar.write(f"**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {tree_data.get('query_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        st.sidebar.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {tree_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = tree_data.get('statistics', {})
        if stats:
            st.sidebar.write(f"**–í—Å–µ–≥–æ —É–∑–ª–æ–≤:** {stats.get('total_nodes', 0)}")
            st.sidebar.write(f"**–í—Å–µ–≥–æ –ø—É—Ç–µ–π:** {stats.get('total_paths', 0)}")
            st.sidebar.write(f"**–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞:** {stats.get('max_depth', 0)}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        show_labels = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Ç–∫–∏ —É–∑–ª–æ–≤", value=True)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        G = build_graph(tree_data)
        
        if G and len(G.nodes()) > 0:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            fig = visualize_tree_plotly(G)
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç")
            export_format = st.sidebar.selectbox(
                "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
                ["PNG", "SVG", "PDF"]
            )
            
            if st.sidebar.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                with st.spinner(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {export_format}..."):
                    try:
                        buf = export_graph_to_image(G, format=export_format.lower())
                        st.sidebar.download_button(
                            label=f"–°–∫–∞—á–∞—Ç—å {export_format}",
                            data=buf,
                            file_name=f"decision_tree_{tree_data.get('query_type', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{export_format.lower()}",
                            mime=f"image/{export_format.lower()}"
                        )
                    except Exception as e:
                        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π
            st.header("–ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
            
            paths = calculate_paths(G)
            if paths:
                path_data = []
                for i, path in enumerate(paths):
                    path_data.append({
                        "‚Ññ": i + 1,
                        "–ü—É—Ç—å": " ‚Üí ".join(path["labels"]),
                        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": f"{path['total_probability']:.4f}",
                        "–î–ª–∏–Ω–∞": len(path["nodes"])
                    })
                
                st.dataframe(pd.DataFrame(path_data), use_container_width=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—É—Ç–µ–π
                if len(paths) > 0:
                    top_n = min(10, len(paths))
                    st.subheader(f"–¢–æ–ø-{top_n} –ø—É—Ç–µ–π –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
                    
                    top_paths = paths[:top_n]
                    fig = go.Figure(data=[
                        go.Bar(
                            x=[f"–ü—É—Ç—å {i+1}" for i in range(len(top_paths))],
                            y=[path["total_probability"] for path in top_paths],
                            marker_color=[
                                get_node_color(path["total_probability"]) 
                                for path in top_paths
                            ]
                        )
                    ])
                    
                    fig.update_layout(
                        title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π",
                        xaxis_title="–ü—É—Ç—å",
                        yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
                        yaxis=dict(range=[0, 1])
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π.")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π.")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏**
    
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
    
    –í–µ—Ä—Å–∏—è: 1.0.0
    """
)