import streamlit as st
import networkx as nx
import json
import os
import plotly.graph_objects as go
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞",
    page_icon="üå≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π
DATA_PATH = os.environ.get("DECISION_TREE_DATA_PATH", "./data/decision_trees")

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—É—Ç—å
if not os.path.exists(DATA_PATH) and os.path.exists("./visualization/data/decision_trees"):
    DATA_PATH = "./visualization/data/decision_trees"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏ —Ä–µ—à–µ–Ω–∏–π
def load_decision_trees():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π"""
    trees = []
    if os.path.exists(DATA_PATH):
        for file in os.listdir(DATA_PATH):
            if file.endswith('.json'):
                try:
                    with open(os.path.join(DATA_PATH, file), 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        created_at = data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        query_type = data.get('query_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        query_text = data.get('query_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        trees.append({
                            'filename': file,
                            'created_at': created_at,
                            'query_type': query_type,
                            'query_text': query_text,
                            'display_name': f"{query_type} - {query_text[:50]}..." if len(query_text) > 50 else f"{query_type} - {query_text}"
                        })
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file}: {str(e)}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    return sorted(trees, key=lambda x: x.get('created_at', ''), reverse=True)

def load_tree_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π –∏–∑ JSON"""
    try:
        with open(os.path.join(DATA_PATH, filename), 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ä–µ–≤–∞: {str(e)}")
        return None

def build_graph(tree_data):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ NetworkX –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π"""
    G = nx.DiGraph()
    
    def add_node_recursive(node_data, parent_id=None):
        if not node_data:
            return
        
        node_id = node_data.get('id', 'unknown')
        label = node_data.get('label', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        probability = node_data.get('probability', 1.0)
        description = node_data.get('description', '')
        
        G.add_node(node_id, 
                  label=label, 
                  probability=probability, 
                  description=description)
        
        if parent_id:
            G.add_edge(parent_id, node_id)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        children = node_data.get('children', [])
        for child in children:
            add_node_recursive(child, node_id)
    
    root = tree_data.get('root', {})
    add_node_recursive(root)
    
    return G

def get_node_color(probability):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —É–∑–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    if probability >= 0.8:
        return '#2E8B57'  # –ó–µ–ª–µ–Ω—ã–π
    elif probability >= 0.6:
        return '#FFD700'  # –ñ–µ–ª—Ç—ã–π
    elif probability >= 0.4:
        return '#FF8C00'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    else:
        return '#DC143C'  # –ö—Ä–∞—Å–Ω—ã–π

def visualize_tree_plotly(G, color_scheme='default', show_probabilities=True, layout_type='hierarchical'):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ —Å –ø–æ–º–æ—â—å—é Plotly"""
    if not G or len(G.nodes()) == 0:
        return None
    
    try:
        # –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
        if layout_type == 'hierarchical':
            try:
                pos = nx.nx_agraph.graphviz_layout(G, prog="dot")
            except Exception:
                pos = nx.spring_layout(G, k=3, iterations=50)
        elif layout_type == 'circular':
            pos = nx.circular_layout(G)
        elif layout_type == 'spring':
            pos = nx.spring_layout(G, k=3, iterations=50)
        else:
            pos = nx.spring_layout(G, k=3, iterations=50)
    except Exception:
        pos = nx.spring_layout(G, k=3, iterations=50)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∑–ª–æ–≤
    node_x = []
    node_y = []
    node_text = []
    node_colors = []
    node_sizes = []
    
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        
        node_data = G.nodes[node]
        label = node_data.get('label', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        probability = node_data.get('probability', 1.0)
        description = node_data.get('description', '')
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if show_probabilities:
            display_text = f"{label}<br>P: {probability:.3f}"
        else:
            display_text = label
            
        node_text.append(f"{display_text}<br>{description}")
        
        # –¶–≤–µ—Ç —É–∑–ª–∞
        if color_scheme == 'probability':
            node_colors.append(probability)
        else:
            node_colors.append(get_node_color(probability))
        
        # –†–∞–∑–º–µ—Ä —É–∑–ª–∞
        node_sizes.append(15 + probability * 20)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—ë–±–µ—Ä
    edge_x = []
    edge_y = []
    
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.extend([x0, x1, None])
        edge_y.extend([y0, y1, None])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä
    fig.add_trace(go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=2, color='#888'),
        hoverinfo='none',
        mode='lines',
        showlegend=False
    ))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
    if color_scheme == 'probability':
        fig.add_trace(go.Scatter(
            x=node_x, y=node_y,
            mode='markers+text',
            hoverinfo='text',
            text=[G.nodes[node].get('label', '') for node in G.nodes()],
            textposition="middle center",
            hovertext=node_text,
            marker=dict(
                size=node_sizes,
                color=node_colors,
                colorscale='RdYlGn',
                cmin=0,
                cmax=1,
                colorbar=dict(title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"),
                line=dict(width=2, color='black')
            ),
            showlegend=False
        ))
    else:
        fig.add_trace(go.Scatter(
            x=node_x, y=node_y,
            mode='markers+text',
            hoverinfo='text',
            text=[G.nodes[node].get('label', '') for node in G.nodes()],
            textposition="middle center",
            hovertext=node_text,
            marker=dict(
                size=node_sizes,
                color=node_colors,
                line=dict(width=2, color='black')
            ),
            showlegend=False
        ))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title="–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π",
        titlefont_size=16,
        showlegend=False,
        hovermode='closest',
        margin=dict(b=20,l=5,r=5,t=40),
        annotations=[ dict(
            text="",
            showarrow=False,
            xref="paper", yref="paper",
            x=0.005, y=-0.002 ) ],
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        plot_bgcolor='white'
    )
    
    return fig

def calculate_paths(G):
    """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø—É—Ç–µ–π –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç—å–µ–≤"""
    if not G or len(G.nodes()) == 0:
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª (—É–∑–µ–ª –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä)
    root_nodes = [n for n in G.nodes() if G.in_degree(n) == 0]
    if not root_nodes:
        return []
    
    root_node = root_nodes[0]
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (—É–∑–ª—ã –±–µ–∑ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä)
    leaf_nodes = [n for n in G.nodes() if G.out_degree(n) == 0]
    if not leaf_nodes:
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç—å–µ–≤
    all_paths = []
    for leaf in leaf_nodes:
        try:
            for path in nx.all_simple_paths(G, source=root_node, target=leaf):
                path_info = {
                    "nodes": path,
                    "labels": [G.nodes[n].get('label', '') for n in path],
                    "probabilities": [G.nodes[n].get('probability', 1.0) for n in path],
                    "total_probability": 1.0
                }
                
                # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
                for prob in path_info["probabilities"]:
                    path_info["total_probability"] *= prob
                
                all_paths.append(path_info)
        except nx.NetworkXNoPath:
            continue
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É—Ç–µ–π –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
    return sorted(all_paths, key=lambda x: x["total_probability"], reverse=True)

def compare_trees(tree1_data, tree2_data):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π"""
    comparison = {
        'basic_stats': {},
        'structural_differences': {},
        'common_paths': [],
        'unique_paths_tree1': [],
        'unique_paths_tree2': []
    }
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats1 = tree1_data.get('statistics', {})
    stats2 = tree2_data.get('statistics', {})
    
    comparison['basic_stats'] = {
        'tree1': {
            'nodes': stats1.get('total_nodes', 0),
            'paths': stats1.get('total_paths', 0),
            'depth': stats1.get('max_depth', 0),
            'query_type': tree1_data.get('query_type', 'unknown')
        },
        'tree2': {
            'nodes': stats2.get('total_nodes', 0),
            'paths': stats2.get('total_paths', 0),
            'depth': stats2.get('max_depth', 0),
            'query_type': tree2_data.get('query_type', 'unknown')
        }
    }
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Ç–µ–π
    G1 = build_graph(tree1_data)
    G2 = build_graph(tree2_data)
    
    paths1 = calculate_paths(G1)
    paths2 = calculate_paths(G2)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ - –ø–æ –º–µ—Ç–∫–∞–º —É–∑–ª–æ–≤)
    paths1_labels = [" ‚Üí ".join(path["labels"]) for path in paths1]
    paths2_labels = [" ‚Üí ".join(path["labels"]) for path in paths2]
    
    common_paths = list(set(paths1_labels) & set(paths2_labels))
    unique_paths_tree1 = list(set(paths1_labels) - set(paths2_labels))
    unique_paths_tree2 = list(set(paths2_labels) - set(paths1_labels))
    
    comparison['common_paths'] = common_paths
    comparison['unique_paths_tree1'] = unique_paths_tree1
    comparison['unique_paths_tree2'] = unique_paths_tree2
    
    return comparison

def export_graph_to_image(G, format='png', dpi=300):
    """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    plt.figure(figsize=(12, 8), dpi=dpi)
    
    try:
        pos = nx.nx_agraph.graphviz_layout(G, prog="dot")
    except Exception:
        pos = nx.spring_layout(G)
    
    # –†–∏—Å—É–µ–º —É–∑–ª—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    node_colors = [get_node_color(G.nodes[n].get('probability', 0)) for n in G.nodes()]
    node_sizes = [300 + G.nodes[n].get('probability', 0) * 500 for n in G.nodes()]
    
    nx.draw(G, pos, with_labels=True, node_color=node_colors, 
            node_size=node_sizes, font_size=8, font_weight='bold',
            edge_color='gray', arrows=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    plt.title("–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π", fontsize=16)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format=format, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üå≥ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞")
st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∞–Ω–∞–ª–∏–∑ –¥–µ—Ä–µ–≤—å–µ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ä–µ–≤–∞", "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤
trees = load_decision_trees()

if not trees:
    st.warning("–î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è.")
    st.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: {os.path.abspath(DATA_PATH)}")
else:
    # –í–∫–ª–∞–¥–∫–∞ 1: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ä–µ–≤–∞
    with tab1:
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
        query_types = list(set(tree['query_type'] for tree in trees))
        selected_type = st.sidebar.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞",
            ["–í—Å–µ"] + query_types
        )
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ —Ç–∏–ø—É
        filtered_trees = trees
        if selected_type != "–í—Å–µ":
            filtered_trees = [tree for tree in trees if tree['query_type'] == selected_type]
        
        # –í—ã–±–æ—Ä –¥–µ—Ä–µ–≤–∞
        tree_options = {tree['display_name']: tree['filename'] for tree in filtered_trees}
        selected_tree_name = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π",
            list(tree_options.keys())
        )
        
        selected_tree_filename = tree_options[selected_tree_name]
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        tree_data = load_tree_data(selected_tree_filename)
        
        if tree_data:
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤–∞
            st.sidebar.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–µ–≤–µ")
            st.sidebar.write(f"**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {tree_data.get('query_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            st.sidebar.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {tree_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            st.sidebar.write(f"**–ó–∞–ø—Ä–æ—Å:** {tree_data.get('query_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = tree_data.get('statistics', {})
            if stats:
                st.sidebar.write(f"**–í—Å–µ–≥–æ —É–∑–ª–æ–≤:** {stats.get('total_nodes', 0)}")
                st.sidebar.write(f"**–í—Å–µ–≥–æ –ø—É—Ç–µ–π:** {stats.get('total_paths', 0)}")
                st.sidebar.write(f"**–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞:** {stats.get('max_depth', 0)}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            color_scheme = st.sidebar.selectbox(
                "–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞",
                ["default", "probability"],
                format_func=lambda x: "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" if x == "default" else "–ü–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"
            )
            show_probabilities = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", value=True)
            layout_type = st.sidebar.selectbox(
                "–¢–∏–ø –º–∞–∫–µ—Ç–∞",
                ["hierarchical", "spring", "circular"],
                format_func=lambda x: {"hierarchical": "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π", "spring": "–ü—Ä—É–∂–∏–Ω–Ω—ã–π", "circular": "–ö—Ä—É–≥–æ–≤–æ–π"}[x]
            )
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
            G = build_graph(tree_data)
            
            if G and len(G.nodes()) > 0:
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                fig = visualize_tree_plotly(G, color_scheme, show_probabilities, layout_type)
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                
                # –≠–∫—Å–ø–æ—Ä—Ç
                st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç")
                export_format = st.sidebar.selectbox(
                    "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
                    ["PNG", "SVG", "PDF"]
                )
                
                if st.sidebar.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                    with st.spinner(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {export_format}..."):
                        try:
                            buf = export_graph_to_image(G, format=export_format.lower())
                            st.sidebar.download_button(
                                label=f"–°–∫–∞—á–∞—Ç—å {export_format}",
                                data=buf,
                                file_name=f"decision_tree_{tree_data.get('query_type', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{export_format.lower()}",
                                mime=f"image/{export_format.lower()}"
                            )
                        except Exception as e:
                            st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π
                st.header("–ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
                
                paths = calculate_paths(G)
                if paths:
                    path_data = []
                    for i, path in enumerate(paths):
                        path_data.append({
                            "‚Ññ": i + 1,
                            "–ü—É—Ç—å": " ‚Üí ".join(path["labels"]),
                            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": f"{path['total_probability']:.4f}",
                            "–î–ª–∏–Ω–∞": len(path["nodes"])
                        })
                    
                    st.dataframe(pd.DataFrame(path_data), use_container_width=True)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—É—Ç–µ–π
                    if len(paths) > 0:
                        top_n = min(10, len(paths))
                        st.subheader(f"–¢–æ–ø-{top_n} –ø—É—Ç–µ–π –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
                        
                        top_paths = paths[:top_n]
                        fig = go.Figure(data=[
                            go.Bar(
                                x=[f"–ü—É—Ç—å {i+1}" for i in range(len(top_paths))],
                                y=[path["total_probability"] for path in top_paths],
                                marker_color=[
                                    get_node_color(path["total_probability"]) 
                                    for path in top_paths
                                ]
                            )
                        ])
                        
                        fig.update_layout(
                            title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π",
                            xaxis_title="–ü—É—Ç—å",
                            yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
                            yaxis=dict(range=[0, 1])
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π.")
    
    # –í–∫–ª–∞–¥–∫–∞ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
    with tab2:
        st.header("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ü–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ")
            tree_options_1 = {tree['display_name']: tree['filename'] for tree in trees}
            selected_tree_1 = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ",
                list(tree_options_1.keys()),
                key="tree1"
            )
            
        with col2:
            st.subheader("–í—Ç–æ—Ä–æ–µ –¥–µ—Ä–µ–≤–æ")
            tree_options_2 = {tree['display_name']: tree['filename'] for tree in trees}
            selected_tree_2 = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –¥–µ—Ä–µ–≤–æ",
                list(tree_options_2.keys()),
                key="tree2"
            )
        
        if selected_tree_1 and selected_tree_2 and selected_tree_1 != selected_tree_2:
            tree_data_1 = load_tree_data(tree_options_1[selected_tree_1])
            tree_data_2 = load_tree_data(tree_options_2[selected_tree_2])
            
            if tree_data_1 and tree_data_2:
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
                comparison = compare_trees(tree_data_1, tree_data_2)
                
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                stats_df = pd.DataFrame({
                    '–ú–µ—Ç—Ä–∏–∫–∞': ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π', '–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞', '–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞'],
                    '–ü–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ': [
                        comparison['basic_stats']['tree1']['nodes'],
                        comparison['basic_stats']['tree1']['paths'],
                        comparison['basic_stats']['tree1']['depth'],
                        comparison['basic_stats']['tree1']['query_type']
                    ],
                    '–í—Ç–æ—Ä–æ–µ –¥–µ—Ä–µ–≤–æ': [
                        comparison['basic_stats']['tree2']['nodes'],
                        comparison['basic_stats']['tree2']['paths'],
                        comparison['basic_stats']['tree2']['depth'],
                        comparison['basic_stats']['tree2']['query_type']
                    ]
                })
                
                st.dataframe(stats_df, use_container_width=True)
                
                # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π
                st.subheader("üõ§Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–û–±—â–∏–µ –ø—É—Ç–∏", len(comparison['common_paths']))
                    
                with col2:
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–¥–µ—Ä–µ–≤–æ 1)", len(comparison['unique_paths_tree1']))
                    
                with col3:
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–¥–µ—Ä–µ–≤–æ 2)", len(comparison['unique_paths_tree2']))
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π
                if comparison['common_paths']:
                    st.subheader("ü§ù –û–±—â–∏–µ –ø—É—Ç–∏")
                    for i, path in enumerate(comparison['common_paths'][:10], 1):
                        st.write(f"{i}. {path}")
                
                if comparison['unique_paths_tree1']:
                    st.subheader("üîµ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞")
                    for i, path in enumerate(comparison['unique_paths_tree1'][:10], 1):
                        st.write(f"{i}. {path}")
                
                if comparison['unique_paths_tree2']:
                    st.subheader("üî¥ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤—Ç–æ—Ä–æ–≥–æ –¥–µ—Ä–µ–≤–∞")
                    for i, path in enumerate(comparison['unique_paths_tree2'][:10], 1):
                        st.write(f"{i}. {path}")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                st.subheader("üìà –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                G1 = build_graph(tree_data_1)
                G2 = build_graph(tree_data_2)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–ü–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ**")
                    fig1 = visualize_tree_plotly(G1)
                    if fig1:
                        st.plotly_chart(fig1, use_container_width=True)
                
                with col2:
                    st.write("**–í—Ç–æ—Ä–æ–µ –¥–µ—Ä–µ–≤–æ**")
                    fig2 = visualize_tree_plotly(G2)
                    if fig2:
                        st.plotly_chart(fig2, use_container_width=True)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ–±–æ–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    
    # –í–∫–ª–∞–¥–∫–∞ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    with tab3:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
        st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã:**")
        st.write("- **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é**: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
        st.write("- **–ü–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏**: –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —à–∫–∞–ª–∞ –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∑–µ–ª–µ–Ω–æ–º—É")
        
        # –¢–∏–ø—ã –º–∞–∫–µ—Ç–æ–≤
        st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞–∫–µ—Ç–æ–≤:**")
        st.write("- **–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π**: –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑")
        st.write("- **–ü—Ä—É–∂–∏–Ω–Ω—ã–π**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ–º")
        st.write("- **–ö—Ä—É–≥–æ–≤–æ–π**: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ –∫—Ä—É–≥—É")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.subheader("üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        st.write("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        st.write("- **PNG**: –†–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        st.write("- **SVG**: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        st.write("- **PDF**: –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        st.write(f"**–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º:** `{os.path.abspath(DATA_PATH)}`")
        st.write(f"**–í—Å–µ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤:** {len(trees)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        if trees:
            query_type_counts = {}
            for tree in trees:
                query_type = tree['query_type']
                query_type_counts[query_type] = query_type_counts.get(query_type, 0) + 1
            
            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:**")
            for query_type, count in query_type_counts.items():
                st.write(f"- {query_type}: {count}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        st.subheader("üßπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"):
            st.cache_data.clear()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        st.subheader("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.write("**–í–µ—Ä—Å–∏—è:** 2.0.0")
        st.write("**–§—É–Ω–∫—Ü–∏–∏:**")
        st.write("- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π")
        st.write("- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π")
        st.write("- –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
        st.write("- –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
        st.write("- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏ –º–∞–∫–µ—Ç—ã")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏**
    
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
    
    –í–µ—Ä—Å–∏—è: 2.0.0
    """
)